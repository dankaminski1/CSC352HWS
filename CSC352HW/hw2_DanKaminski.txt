--1
DECLARE
    DAN_TOTAL NUMBER(15) := 0;
    DAN_AVERAGE NUMBER(10,2) := 0;
    DAN_COUNT NUMBER(2) := 0;
    CURSOR DAN_CURSOR IS SELECT SALARY FROM EMPLOYEES WHERE DEPARTMENT_ID=60;
BEGIN
    FOR S IN DAN_CURSOR LOOP                    
        IF (S.SALARY > 5000) THEN       
        DAN_TOTAL := DAN_TOTAL + S.SALARY;
    ELSE
        DAN_TOTAL := DAN_TOTAL + 5000;
    END IF;
        DAN_COUNT := DAN_COUNT + 1;                   
END LOOP;
    DAN_AVERAGE := DAN_TOTAL / DAN_COUNT;                
    DBMS_OUTPUT.PUT_LINE('AVERAGE_SALARY');
    DBMS_OUTPUT.PUT_LINE('--------------');
    DBMS_OUTPUT.PUT_LINE(TRIM(TO_CHAR(DAN_AVERAGE,'$9,99,999.99')));
END;


--2
DECLARE
    DAN_DEPARTMENT_ID DEPARTMENTS.DEPARTMENT_ID%TYPE;
    DAN_DEPARTMENT_NAME DEPARTMENTS.DEPARTMENT_NAME%TYPE;
    DAN_MANAGER_ID DEPARTMENTS.MANAGER_ID%TYPE;
    DAN_LOCATION_ID DEPARTMENTS.LOCATION_ID%TYPE;

BEGIN
    INSERT INTO DEPARTMENTS(DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID) VALUES(299, 'Future', 145, 1700);
    SELECT DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID
    INTO DAN_DEPARTMENT_ID, DAN_DEPARTMENT_NAME, DAN_MANAGER_ID, DAN_LOCATION_ID
    FROM DEPARTMENTS
    WHERE DEPARTMENT_ID = 299;
    DBMS_OUTPUT.PUT_LINE('INSERTED RECORD');
    DBMS_OUTPUT.PUT_LINE('DEPARTMENT_ID'||CHR(9)||'DEPARTMENT_NAME'||CHR(9)||'MANAGER_ID'||CHR(9)||'LOCATION_ID');
    DBMS_OUTPUT.PUT_LINE(DAN_DEPARTMENT_ID||CHR(9)||CHR(9)||CHR(9)||CHR(9)||DAN_DEPARTMENT_NAME||CHR(9)||CHR(9)||CHR(9)||CHR(9)||DAN_MANAGER_ID||CHR(9)||CHR(9)||DAN_LOCATION_ID);
END;

--3
DECLARE
    DAN_DEPARTMENT_NAME DEPARTMENTS.DEPARTMENT_NAME%TYPE;
    DAN_MANAGER_ID DEPARTMENTS.MANAGER_ID%TYPE;
BEGIN
    DELETE FROM DEPARTMENTS WHERE DEPARTMENT_ID=299
        RETURNING DEPARTMENT_NAME, MANAGER_ID INTO DAN_DEPARTMENT_NAME, DAN_MANAGER_ID;
    DBMS_OUTPUT.PUT_LINE('DELETED RECORD');
    DBMS_OUTPUT.PUT_LINE('DEPARTMENT_NAME'||CHR(9)||'MANAGER_ID');
    DBMS_OUTPUT.PUT_LINE(DAN_DEPARTMENT_NAME||CHR(9)||CHR(9)||CHR(9)||DAN_MANAGER_ID);
END;

--4
DECLARE
    DAN_EMP_NAME EMPLOYEES.LAST_NAME %TYPE;
    DAN_EMP_ID NUMBER;
BEGIN
    SELECT COUNT(EMPLOYEE_ID) INTO DAN_EMP_ID FROM EMPLOYEES JOIN DEPARTMENTS ON EMPLOYEES.EMPLOYEE_ID <> DEPARTMENTS.DEPARTMENT_ID;
        IF DAN_EMP_NAME = 1 THEN
            UPDATE EMPLOYEES SET DEPARTMENT_ID = 60 WHERE EMPLOYEES.EMPLOYEE_ID <> DEPARTMENT_id;
        ELSIF DAN_EMP_NAME > 1 THEN
            SELECT LAST_NAME, EMPLOYEE_ID INTO DAN_EMP_NAME, DAN_EMP_ID FROM EMPLOYEES WHERE EMPLOYEES.EMPLOYEE_ID <> DEPARTMENT_ID;
        
    ELSE
        DBMS_OUTPUT.PUT_LINE('No Employees Found');
    END IF;
END;

--5
DECLARE
avg_sal NUMBER(6);
dan_message Varchar2(20);
BEGIN
SELECT AVG(salary) INTO avg_sal FROM EMPLOYEES WHERE DEPARTMENT_ID = 50;
IF avg_sal < 2500 THEN
  dan_message := 'Low';
ELSIF 2500 < avg_sal AND avg_sal < 3500  THEN
dan_message := 'Ok';
ELSE
dan_message := 'High';
END IF;
DBMS_OUTPUT.PUT_LINE(dan_message);
END;

--6
DECLARE
    DAN_EMPLOYEE_ID EMPLOYEES.EMPLOYEE_ID%TYPE;
    DAN_SALARY EMPLOYEES.SALARY%TYPE;
    DAN_HIRE_DATE EMPLOYEES.HIRE_DATE%TYPE;
    DAN_YEARS NUMBER(2);
    BONUS_ONE EMPLOYEES.SALARY%TYPE := 500;
    BONUS_TWO EMPLOYEES.SALARY%TYPE := 0;
    BONUS_THREE EMPLOYEES.SALARY%TYPE := 0;
    DAN_NEW_SALARY EMPLOYEES.SALARY%TYPE := 0;
BEGIN
    SELECT EMPLOYEE_ID, SALARY, HIRE_DATE INTO DAN_EMPLOYEE_ID, DAN_SALARY, DAN_HIRE_DATE FROM EMPLOYEES WHERE EMPLOYEE_ID=114;
    DAN_YEARS := FLOOR(MONTHS_BETWEEN(SYSDATE, DAN_HIRE_DATE)/12);
    DBMS_OUTPUT.PUT_LINE('EMPLOYEE_ID'||CHR(9)||'SALARY'||CHR(9)||'YEARS');
    DBMS_OUTPUT.PUT_LINE(DAN_EMPLOYEE_ID||CHR(9)||CHR(9)||DAN_SALARY||CHR(9)||DAN_YEARS);
    -- BONUS TWO
    IF DAN_YEARS >= 24 THEN 
        BONUS_TWO := 240;
    END IF;
    -- BONUS THREE
    IF DAN_SALARY > 10000 THEN BONUS_THREE := 200;
    ELSIF DAN_SALARY <= 10000 AND DAN_SALARY >= 6000 THEN BONUS_THREE := 400;
    ELSIF DAN_SALARY < 6000 THEN BONUS_THREE :=800;
    END IF;
    DBMS_OUTPUT.PUT_LINE('SECOND BONUS : '||BONUS_TWO||CHR(9)|| 'THIRD BONUS : '||BONUS_THREE);
    DAN_NEW_SALARY := DAN_SALARY + BONUS_ONE + BONUS_TWO + BONUS_THREE;
    DBMS_OUTPUT.PUT_LINE('OLD SALARY : '||DAN_SALARY||CHR(9)|| 'NEW SALARY : '||DAN_NEW_SALARY);
END;

--7
DECLARE 
   DAN_VALUE NUMBER(2) := 25; 
BEGIN 
   LOOP
      DBMS_OUTPUT.PUT_LINE('USING BASIC LOOP : '||DAN_VALUE); 
      DAN_VALUE := DAN_VALUE + 1; 
      IF DAN_VALUE > 27 THEN 
         EXIT; 
      END IF; 
   END LOOP; 
   FOR DAN_VALUE IN 25..27 LOOP
    DBMS_OUTPUT.PUT_LINE('USING FOR LOOP : '||DAN_VALUE);
   END LOOP;
   DAN_VALUE := 25;
   WHILE DAN_VALUE < 28 LOOP
    DBMS_OUTPUT.PUT_LINE('USING WHILE LOOP : '||DAN_VALUE);
    DAN_VALUE := DAN_VALUE + 1;
   END LOOP;
END; 

--8
BEGIN 
    -- UPDATE
    UPDATE EMPLOYEES SET SALARY= (SALARY + (SALARY * 0.01)) WHERE DEPARTMENT_ID=60;
    DBMS_OUTPUT.PUT_LINE('NUMBER OF EMPLOYEE RECORDS UPDATED: ' || TO_CHAR(SQL%ROWCOUNT));
    -- DELETE
    DELETE FROM EMPLOYEES WHERE DEPARTMENT_ID IS NULL;
    DBMS_OUTPUT.PUT_LINE('NUMBER OF EMPLOYEE RECORDS DELETED: ' || TO_CHAR(SQL%ROWCOUNT));
    ROLLBACK;
END; 

--9
DECLARE
    CURSOR DAN_EMPCUR IS 
    SELECT EMPLOYEE_ID, FIRST_NAME||' '||LAST_NAME AS "FULL_NAME", SALARY FROM (SELECT * FROM EMPLOYEES ORDER BY SALARY DESC)
    WHERE ROWNUM <=3;
    DAN_EMPREC    DAN_EMPCUR%ROWTYPE;
BEGIN
    FOR DAN_EMPREC IN DAN_EMPCUR LOOP
        DBMS_OUTPUT.PUT_LINE(DAN_EMPREC.EMPLOYEE_ID||CHR(9)||DAN_EMPREC.FULL_NAME||CHR(9)||DAN_EMPREC.SALARY);
    END LOOP;
END;